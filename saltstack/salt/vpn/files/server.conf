{% import_yaml "vpn/easy-rsa/defaults.yaml" as defaults %}
{% set ovpn = salt['pillar.get']('openvpn:key', defaults.openvpn, merge=True) %}

# Which local IP to listen on
{% if salt['pillar.get']('openvpn:server:local') is defined %}
local {{ salt['pillar.get']('openvpn:server:local') }}
{% else %}
{% set ip = salt['network.ip_addrs'](type="public")[0] %}
local {{ ip }}
{% endif %}

# TCP server
proto tcp

# Listen on port
port 443

# Use a routed IP tunnel
dev tun0

# Enable TLS and assume server role during TLS handshake. Note that OpenVPN is designed as a peer-to-peer application.
# The designation of client or server is only for the purpose of negotiating the TLS control channel.
tls-server

# Exit on TLS negotiation failure
tls-exit

# Paths to CA cert, server cert and server key. Take a look at the easy-rsa state for generating these
ca 	keys/ca.crt
cert 	keys/{{ ovpn.key_ou }}.crt
key 	keys/{{ ovpn.key_ou }}.key  # This file should be kept secret

# Revoking Certificates
{%- set crl_path = '/etc/openvpn/crl.pem' %}
{%- if salt['file.file_exists']('crl.pem') == True %}
crl-verify crl.pem
{%- else %}
#crl-verify crl.pem
{%- endif %}

# Diffie hellman parameters.
dh keys/dh{{ ovpn.key_size }}.pem

# Network topology
# Defaults to net30 (not recommended)
{% if salt['pillar.get']('openvpn:server:topology') is defined %}
topology {{ salt['pillar.get']('openvpn:server:topology') }}
{% endif %}

# Set server mode and configure subnet for clients
server {{ salt['pillar.get']('openvpn:server:subnet') }}

# Map static client <-> IP pairings
ifconfig-pool-persist /etc/openvpn/ipp-443.txt

# Push routes to client
{% for subnet, mask in salt['pillar.get']('openvpn:server:routes', {}).items() %}
push "route {{ subnet }} {{ mask}}"
{% endfor %}

# Where are client config directives stored
{% if salt['pillar.get']('openvpn:server:ccd_exclusive') %}
client-config-dir {{ salt['pillar.get']('openvpn:server:ccd_dir', '/etc/openvpn/tcp-443') }}
{% endif %}

# Require, as a condition of authentication, that a connecting client has a --client-config-dir file
{% if salt['pillar.get']('openvpn:server:ccd_exclusive') %}
ccd-exclusive
{% endif %}

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive {{ salt['pillar.get']('openvpn:server:keepalive', '10 120') }}

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
tls-auth keys/ta.key 0 # This file is secret
key-direction 0

# Require that peer certificate was signed with an explicit key usage
# and extended key usage based on RFC3280 TLS rules.
# This is a useful security option for clients, to ensure that
# the host they connect to is a designated server.
# This is an important security precaution to protect against
# a man-in-the-middle attack where an authorized client attempts
# to connect to another client by impersonating the server.
remote-cert-tls client

# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
cipher {{ salt['pillar.get']('openvpn:server:cipher', 'AES-128-CBC') }}

# Authenticate packets with HMAC using a message digest algorithm
auth {{ salt['pillar.get']('openvpn:server:auth', 'SHA256') }}

# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
comp-lzo

# The maximum number of concurrently connected
# clients we want to allow.
max-clients {{ salt['pillar.get']('openvpn:server:max_clients', '10') }}

# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
#
# You can uncomment this out on
# non-Windows systems.
user nobody
group nogroup

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status {{ salt['pillar.get']('openvpn:server:status', '/var/log/openvpn/openvpn-status-443.log') }}

# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
log {{ salt['pillar.get']('openvpn:server:log', '/var/log/openvpn/tcp.log') }}

# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb {{ salt['pillar.get']('openvpn:server:verb', '5') }}

# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
mute 1000

# Silence the output of replay warnings, which are a common
# false alarm on WiFi networks.  This option preserves
# the security of the replay protection code without
# the verbosity associated with warnings about duplicate packets.
mute-replay-warnings
