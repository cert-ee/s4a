{% set detector_name = salt['cmd.run'](cmd='curl -s http://localhost:4000/api/registration| jq -r .[].unique_name', python_shell=True) %}
{% if salt['file.file_exists']('/etc/default/s4a-detector') %}
{% set multiviewer_enabled = salt['cmd.run'](cmd='grep -i MULTIVIEWER_ENABLED=True /etc/default/s4a-detector|cut -d= -f2', python_shell=True) %}
{% endif %}
{% if salt['file.file_exists']('/etc/elasticsearch/elasticsearch.yml') %}
{% set cluster_name_exists = salt['cmd.run'](cmd='cat /etc/elasticsearch/elasticsearch.yml |grep cluster.name| cut -d" " -f2', python_shell=True) %}
{% endif %}

{% if cluster_name_exists is not defined or cluster_name_exists == "" or cluster_name_exists == "my-application" or cluster_name_exists == "Unregistered"%}
cluster.name: {{ detector_name }}
{% else %}
cluster.name: {{ cluster_name_exists }}
{% endif %}
node.name: "{{ salt['grains.get']('host', 'node1') }}"
node.data: true
path.data: /srv/elasticsearch
path.logs: /var/log/elasticsearch
{% if multiviewer_enabled == "True" or multiviewer_enabled == "true" %}
network.host: 0.0.0.0
{% else %}
network.host: _local_
{% endif %}
bootstrap.memory_lock: true
http.port: 9200
transport.host: localhost
transport.tcp.port: 9300

gateway.expected_data_nodes: 1
gateway.recover_after_data_nodes: 1

discovery.type: single-node
discovery.seed_hosts: ["127.0.0.1", "[::1]"]

indices.breaker.fielddata.limit: 70%

cluster.routing.allocation.disk.threshold_enabled: true
cluster.routing.allocation.disk.watermark.low: 10gb
cluster.routing.allocation.disk.watermark.high: 5gb
cluster.routing.allocation.disk.watermark.flood_stage: 2gb
cluster.info.update.interval: 1m

xpack.security.enabled: false
