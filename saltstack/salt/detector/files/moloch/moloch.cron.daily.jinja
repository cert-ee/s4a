#!/bin/bash
#
# Custom calculations to set RETAINNUMDAYS
# Initalize variables
export LC_ALL=C

getMolochSessionsSize() {
sizes=""
nr=""
ngb=""
molochAverageSession=""

# We need bc for non integer calculations and jq for parsing json
apt-get -q -y install bc jq >>/dev/null

# Get number of available indexes
nr="$(curl --silent -XGET "$ESHOSTPORT/_cat/indices?v&pretty" --stderr - | grep -oE 'sessions.*-[0-9]{6}' | tr '\n' ' ' | sed 's/ $//')"

# Get index sizes in bytes
for x in $nr
do
    sizes+=" $(curl --silent -XGET "$ESHOSTPORT/$x/_stats" | jq ".indices[\"$x\"].total.store.size_in_bytes // empty" 2>/dev/null)"
done

# Get average of all returned index sizes
average=`echo $sizes | jq -s 'add/length'`

# Convert average to GB and round up
ngb=$(echo $average | awk '{ byte =$1 /1024/1024/1024; print byte}')
molochAverageSession=$(printf "%.0f" $ngb)

# Make sure that molochAverageSession is not zero
if [ $molochAverageSession -eq 0 ] ; then
    molochAverageSession=1
fi

}

removeEveBoxLogs() {

if [ -z $eveLogsToKeep ]
then
	eveLogsToKeep=62
fi

eveLogs="$(curl --silent -XGET "$ESHOSTPORT/_cat/indices?v&pretty" --stderr - | grep -oE 'logstash.*-[0-9]{4}\.[0-9]{2}\.[0-9]{2}' | sort)"
eveLogCount=$(wc -w <<< "$eveLogs")
eveLogsDeleteCount=$(bc <<< "$eveLogCount - $eveLogsToKeep")

if [ $eveLogsDeleteCount -ge 0 ]
then
        for log in $(head -n $eveLogsDeleteCount <<< "$eveLogs");
        do
                echo -n "Removing $log "

                deleteStatus="$(curl --silent -XDELETE "$ESHOSTPORT/$log")"

                if [ $(grep acknowledged <<< "$deleteStatus") ]
                then
                echo "done"
                else
                echo "fail"
                fi
        done
fi

}

getLogstashSize() {

sum=""
ngb=""
logstashSize=""
sizes=""

logstash="$(curl --silent -XGET "$ESHOSTPORT/_cat/indices?v&pretty" --stderr - | grep -oE 'logstash.*-[0-9]{4}\.[0-9]{2}\.[0-9]{2}' | tr '\n' ' ' | sed 's/ $//')"

# Get index sizes in bytes
for x in $logstash
do
    sizes+=" $(curl --silent -XGET "$ESHOSTPORT/$x/_stats" | jq ".indices[\"$x\"].total.store.size_in_bytes // empty" 2>/dev/null)"
done

# Get sum of all returned index sizes
sum=`echo $sizes | jq -s 'add'`

# Convert sum bytes to GB and round up
ngb=$(echo $sum | awk '{ byte =$1 /1024/1024/1024; print byte}')
logstashSize=$(printf "%.0f" $ngb)

}

######################## End of Functions ##########################

ESHOSTPORT={{ es }}
customSettings=/data/moloch/db/daily_custom.settings

if [ -r $customSettings ]
then
        source $customSettings
fi

getMolochSessionsSize
removeEveBoxLogs
getLogstashSize

# Get disk size in GB of disk where /srv is mounted
disk=`df -BG --output=size /srv/elasticsearch | tail -n 1 | grep -oP '\d+(?=G)'`

# Add in a reserve

# Define custom reserve in file /data/moloch/db/daily_custom.settings
# using variable DISK_RESERVE with a value of reserverd Giga Bytes.
# Example: DISK_RESERVE=500

if [ $DISK_RESERVE ]
then
	source $customSettings
	if [[ $DISK_RESERVE =~ [0-9] ]] && [[ $DISK_RESERVE -gt 0 ]]
	then
		available=$(( $disk - $DISK_RESERVE))
	fi
fi

# If custom reserve is not defined add 15% or 20% of disk size depending if /srv/elasticsearch is a separate partition or not. 
if [ -z $available ]
then
	if mountpoint /srv/elasticsearch >>/dev/null ; then
		available=$(( $disk - $(printf "%.0f\n" $(echo "$disk * 0.15" | bc)) ))
	else
		available=$(( $disk - $(printf "%.0f\n" $(echo "$disk * 0.2)" | bc)) ))
	fi
fi

# Final number of days to keep indexes (-1 day because db.pl is not considering current day)
# Moloch daily cron
RETAINNUMDAYS=$(( (($available - $logstashSize) / $molochAverageSession) - 1 ))

# Sync PCAPs
esNode="$(curl -s $ESHOSTPORT/_cluster/health | jq -r '.cluster_name')"

if [ ! -z "$esNode" ] && [[ $esNode = "$(echo "$esNode" | grep -oE "^[0-9a-zA-Z\.-]+")" ]]
then   
        /data/moloch/db/db.pl $ESHOSTPORT sync-files $esNode /srv/pcap/
fi

/data/moloch/db/db.pl $ESHOSTPORT expire daily $RETAINNUMDAYS
